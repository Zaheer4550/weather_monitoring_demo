name: Postman Collection Sync + Hourly Monitor Summary

on:
  push:
    branches:
      - main
  schedule:
    # Run summary every hour
    - cron: "0 * * * *"
  workflow_dispatch:

jobs:
  # ---------------------------
  # 1. Sync collections on push + HTML reports
  # ---------------------------
  update-collections:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      # --- Current Weather ---
      - name: Update Current Weather Collection & Trigger Monitor
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          mkdir -p artifacts/current-weather
          curl -s -X PUT "https://api.getpostman.com/collections/12345-current-weather-uid" \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -H "Content-Type: application/json" \
            -d @Get\ Current\ Weather_A.postman_collection.json \
            -o artifacts/current-weather/collection_update.json

          curl -s -X POST "https://api.getpostman.com/monitors/45974783-1f084d67-0b9f-4bf0-8be3-5f0db8c25a4f/run" \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -o artifacts/current-weather/monitor_trigger.json

          echo "⏳ Waiting for monitor run to finish..."
          for i in {1..6}; do
            curl -s -H "X-Api-Key: $POSTMAN_API_KEY" \
              "https://api.getpostman.com/monitors/45974783-1f084d67-0b9f-4bf0-8be3-5f0db8c25a4f/results/latest" \
              -o artifacts/current-weather/monitor_latest.json

            if jq -e '.results | length > 0' artifacts/current-weather/monitor_latest.json > /dev/null; then
              echo "✅ Results are ready."
              break
            else
              echo "⏳ Still waiting... retrying in 10s"
              sleep 10
            fi
          done

          echo "monitor,timestamp,status,responseTime" > artifacts/current-weather/monitor.csv
          jq -r '.results[] | ["current-weather", .timestamp, .status, .run.info.responseTime] | @csv' artifacts/current-weather/monitor_latest.json \
            >> artifacts/current-weather/monitor.csv

          total=$(tail -n +2 artifacts/current-weather/monitor.csv | wc -l)
          passed=$(grep -c "ok" artifacts/current-weather/monitor.csv || true)
          failed=$((total - passed))
          now=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          {
            echo "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Monitor Report – current-weather</title>"
            echo "<style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              h1 { color: #333; }
              .summary { display: flex; gap: 20px; margin-bottom: 20px; }
              .card { padding: 15px; border-radius: 8px; color: white; font-weight: bold; min-width: 150px; text-align: center; }
              .green { background-color: #28a745; }
              .red { background-color: #dc3545; }
              table { border-collapse: collapse; width: 100%; margin-top: 20px; }
              th, td { border: 1px solid #ccc; padding: 8px; text-align: center; }
              th { background-color: #f4f4f4; }
              .fail { background-color: #f8d7da; }
              .pass { background-color: #d4edda; }
            </style></head><body>"

            echo "<h1>Monitor Report – current-weather</h1>"
            echo "<p><b>Generated:</b> $now | <b>Range:</b> Latest Run</p>"

            echo "<div class='summary'>"
            echo "<div class='card green'>Total Runs<br>$total</div>"
            echo "<div class='card green'>Passed<br>$passed</div>"
            echo "<div class='card red'>Failed<br>$failed</div>"
            echo "</div>"

            echo "<h2>Run Details</h2>"
            echo "<table><tr><th>Timestamp</th><th>Status</th><th>Response Time (ms)</th></tr>"
            tail -n +2 artifacts/current-weather/monitor.csv | while IFS=, read monitor ts status rt; do
              if [[ $status == "ok" ]]; then
                echo "<tr class='pass'><td>$ts</td><td>$status</td><td>$rt</td></tr>"
              else
                echo "<tr class='fail'><td>$ts</td><td>$status</td><td>$rt</td></tr>"
              fi
            done
            echo "</table></body></html>"
          } > artifacts/current-weather/monitor.html

      # --- Daily Forecast ---
      - name: Update Daily Forecast Collection & Trigger Monitor
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          mkdir -p artifacts/daily-forecast
          curl -s -X PUT "https://api.getpostman.com/collections/12345-daily-forecast-uid" \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -H "Content-Type: application/json" \
            -d @Get\ Daily\ Forecast-\ B.postman_collection.json \
            -o artifacts/daily-forecast/collection_update.json

          curl -s -X POST "https://api.getpostman.com/monitors/45974783-1f084d6c-cd8b-4f70-a56c-2c989dd363c6/run" \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -o artifacts/daily-forecast/monitor_trigger.json

          echo "⏳ Waiting for monitor run to finish..."
          for i in {1..6}; do
            curl -s -H "X-Api-Key: $POSTMAN_API_KEY" \
              "https://api.getpostman.com/monitors/45974783-1f084d6c-cd8b-4f70-a56c-2c989dd363c6/results/latest" \
              -o artifacts/daily-forecast/monitor_latest.json

            if jq -e '.results | length > 0' artifacts/daily-forecast/monitor_latest.json > /dev/null; then
              echo "✅ Results are ready."
              break
            else
              echo "⏳ Still waiting... retrying in 10s"
              sleep 10
            fi
          done

          echo "monitor,timestamp,status,responseTime" > artifacts/daily-forecast/monitor.csv
          jq -r '.results[] | ["daily-forecast", .timestamp, .status, .run.info.responseTime] | @csv' artifacts/daily-forecast/monitor_latest.json \
            >> artifacts/daily-forecast/monitor.csv

          total=$(tail -n +2 artifacts/daily-forecast/monitor.csv | wc -l)
          passed=$(grep -c "ok" artifacts/daily-forecast/monitor.csv || true)
          failed=$((total - passed))
          now=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          {
            echo "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Monitor Report – daily-forecast</title>"
            echo "<style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              h1 { color: #333; }
              .summary { display: flex; gap: 20px; margin-bottom: 20px; }
              .card { padding: 15px; border-radius: 8px; color: white; font-weight: bold; min-width: 150px; text-align: center; }
              .green { background-color: #28a745; }
              .red { background-color: #dc3545; }
              table { border-collapse: collapse; width: 100%; margin-top: 20px; }
              th, td { border: 1px solid #ccc; padding: 8px; text-align: center; }
              th { background-color: #f4f4f4; }
              .fail { background-color: #f8d7da; }
              .pass { background-color: #d4edda; }
            </style></head><body>"

            echo "<h1>Monitor Report – daily-forecast</h1>"
            echo "<p><b>Generated:</b> $now | <b>Range:</b> Latest Run</p>"

            echo "<div class='summary'>"
            echo "<div class='card green'>Total Runs<br>$total</div>"
            echo "<div class='card green'>Passed<br>$passed</div>"
            echo "<div class='card red'>Failed<br>$failed</div>"
            echo "</div>"

            echo "<h2>Run Details</h2>"
            echo "<table><tr><th>Timestamp</th><th>Status</th><th>Response Time (ms)</th></tr>"
            tail -n +2 artifacts/daily-forecast/monitor.csv | while IFS=, read monitor ts status rt; do
              if [[ $status == "ok" ]]; then
                echo "<tr class='pass'><td>$ts</td><td>$status</td><td>$rt</td></tr>"
              else
                echo "<tr class='fail'><td>$ts</td><td>$status</td><td>$rt</td></tr>"
              fi
            done
            echo "</table></body></html>"
          } > artifacts/daily-forecast/monitor.html

      # --- Historical Data ---
      - name: Update Historical Data Collection & Trigger Monitor
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          mkdir -p artifacts/historical-data
          curl -s -X PUT "https://api.getpostman.com/collections/12345-historical-data-uid" \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -H "Content-Type: application/json" \
            -d @Get\ Historical\ Data-\ C.postman_collection.json \
            -o artifacts/historical-data/collection_update.json

          curl -s -X POST "https://api.getpostman.com/monitors/45974783-1f084d7b-f131-47e0-b084-7926fd355a25/run" \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -o artifacts/historical-data/monitor_trigger.json

          echo "⏳ Waiting for monitor run to finish..."
          for i in {1..6}; do
            curl -s -H "X-Api-Key: $POSTMAN_API_KEY" \
              "https://api.getpostman.com/monitors/45974783-1f084d7b-f131-47e0-b084-7926fd355a25/results/latest" \
              -o artifacts/historical-data/monitor_latest.json

            if jq -e '.results | length > 0' artifacts/historical-data/monitor_latest.json > /dev/null; then
              echo "✅ Results are ready."
              break
            else
              echo "⏳ Still waiting... retrying in 10s"
              sleep 10
            fi
          done

          echo "monitor,timestamp,status,responseTime" > artifacts/historical-data/monitor.csv
          jq -r '.results[] | ["historical-data", .timestamp, .status, .run.info.responseTime] | @csv' artifacts/historical-data/monitor_latest.json \
            >> artifacts/historical-data/monitor.csv

          total=$(tail -n +2 artifacts/historical-data/monitor.csv | wc -l)
          passed=$(grep -c "ok" artifacts/historical-data/monitor.csv || true)
          failed=$((total - passed))
          now=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          {
            echo "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Monitor Report – historical-data</title>"
            echo "<style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              h1 { color: #333; }
              .summary { display: flex; gap: 20px; margin-bottom: 20px; }
              .card { padding: 15px; border-radius: 8px; color: white; font-weight: bold; min-width: 150px; text-align: center; }
              .green { background-color: #28a745; }
              .red { background-color: #dc3545; }
              table { border-collapse: collapse; width: 100%; margin-top: 20px; }
              th, td { border: 1px solid #ccc; padding: 8px; text-align: center; }
              th { background-color: #f4f4f4; }
              .fail { background-color: #f8d7da; }
              .pass { background-color: #d4edda; }
            </style></head><body>"

            echo "<h1>Monitor Report – historical-data</h1>"
            echo "<p><b>Generated:</b> $now | <b>Range:</b> Latest Run</p>"

            echo "<div class='summary'>"
            echo "<div class='card green'>Total Runs<br>$total</div>"
            echo "<div class='card green'>Passed<br>$passed</div>"
            echo "<div class='card red'>Failed<br>$failed</div>"
            echo "</div>"

            echo "<h2>Run Details</h2>"
            echo "<table><tr><th>Timestamp</th><th>Status</th><th>Response Time (ms)</th></tr>"
            tail -n +2 artifacts/historical-data/monitor.csv | while IFS=, read monitor ts status rt; do
              if [[ $status == "ok" ]]; then
                echo "<tr class='pass'><td>$ts</td><td>$status</td><td>$rt</td></tr>"
              else
                echo "<tr class='fail'><td>$ts</td><td>$status</td><td>$rt</td></tr>"
              fi
            done
            echo "</table></body></html>"
          } > artifacts/historical-data/monitor.html

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: monitor-updates
          path: artifacts/
