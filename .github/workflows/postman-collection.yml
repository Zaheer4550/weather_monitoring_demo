name: Postman Collection Sync + Hourly Monitor Reports

on:
  push:
    branches:
      - main
  schedule:
    # Run summary every hour
    - cron: "0 * * * *"
  workflow_dispatch:

jobs:
  # ---------------------------
  # 1. Update collections + Trigger monitors on push
  # ---------------------------
  update-collections:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Update Collections, Trigger Monitors & Fetch Reports
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          mkdir -p artifacts

          declare -A monitors=(
            ["current-weather"]="45974783-1f084d67-0b9f-4bf0-8be3-5f0db8c25a4f"
            ["daily-forecast"]="45974783-1f084d6c-cd8b-4f70-a56c-2c989dd363c6"
            ["historical-data"]="45974783-1f084d7b-f131-47e0-b084-7926fd355a25"
          )

          declare -A collections=(
            ["current-weather"]="12345-current-weather-uid:Get Current Weather_A.postman_collection.json"
            ["daily-forecast"]="12345-daily-forecast-uid:Get Daily Forecast- B.postman_collection.json"
            ["historical-data"]="12345-historical-data-uid:Get Historical Data- C.postman_collection.json"
          )

          for name in "${!monitors[@]}"; do
            uid=${monitors[$name]}
            coll_uid=${collections[$name]%%:*}
            coll_file=${collections[$name]#*:}

            mkdir -p artifacts/$name

            echo "🔄 Updating collection $name..."
            curl -s -X PUT "https://api.getpostman.com/collections/$coll_uid" \
              -H "X-Api-Key: $POSTMAN_API_KEY" \
              -H "Content-Type: application/json" \
              -d @"$coll_file" \
              -o artifacts/$name/collection_update.json

            echo "▶️ Triggering monitor $name..."
            curl -s -X POST "https://api.getpostman.com/monitors/$uid/run" \
              -H "X-Api-Key: $POSTMAN_API_KEY" \
              -o artifacts/$name/monitor_trigger.json

            echo "⏳ Waiting 30s for run to complete..."
            sleep 30

            echo "📥 Fetching latest result for $name..."
            curl -s -H "X-Api-Key: $POSTMAN_API_KEY" \
              "https://api.getpostman.com/monitors/$uid/results/latest" \
              -o artifacts/$name/monitor_latest.json

            echo "📊 Building CSV + Styled HTML for $name..."
            echo "monitor,timestamp,status,responseTime" > artifacts/$name/monitor.csv
            jq -r --arg NAME "$name" '.results[] | [$NAME, .timestamp, .status, .run.info.responseTime] | @csv' artifacts/$name/monitor_latest.json \
              >> artifacts/$name/monitor.csv

            total=$(tail -n +2 artifacts/$name/monitor.csv | wc -l)
            passed=$(grep -c "ok" artifacts/$name/monitor.csv || true)
            failed=$((total - passed))
            skipped=0
            now=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

            {
              echo "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Monitor Report – $name</title>"
              echo "<style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                h1 { color: #333; }
                .summary { display: flex; gap: 20px; margin-bottom: 20px; }
                .card { padding: 15px; border-radius: 8px; color: white; font-weight: bold; min-width: 150px; text-align: center; }
                .green { background-color: #28a745; }
                .red { background-color: #dc3545; }
                .yellow { background-color: #ffc107; color: black; }
                table { border-collapse: collapse; width: 100%; margin-top: 20px; }
                th, td { border: 1px solid #ccc; padding: 8px; text-align: center; }
                th { background-color: #f4f4f4; }
                .fail { background-color: #f8d7da; }
                .pass { background-color: #d4edda; }
              </style></head><body>"

              echo "<h1>Monitor Report – $name</h1>"
              echo "<p><b>Generated:</b> $now | <b>Range:</b> Latest Run</p>"

              echo "<div class='summary'>"
              echo "<div class='card green'>Total Runs<br>$total</div>"
              echo "<div class='card green'>Passed<br>$passed</div>"
              echo "<div class='card red'>Failed<br>$failed</div>"
              echo "<div class='card yellow'>Skipped<br>$skipped</div>"
              echo "</div>"

              echo "<h2>Run Details</h2>"
              echo "<table><tr><th>Timestamp</th><th>Status</th><th>Response Time (ms)</th></tr>"
              tail -n +2 artifacts/$name/monitor.csv | while IFS=, read monitor ts status rt; do
                if [[ $status == "ok" ]]; then
                  echo "<tr class='pass'><td>$ts</td><td>$status</td><td>$rt</td></tr>"
                else
                  echo "<tr class='fail'><td>$ts</td><td>$status</td><td>$rt</td></tr>"
                fi
              done
              echo "</table></body></html>"
            } > artifacts/$name/monitor.html
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: monitor-updates
          path: artifacts/

  # ---------------------------
  # 2. Hourly summary job
  # ---------------------------
  hourly-summary:
    if: github.event.schedule == '0 * * * *' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Build 1h Monitor Reports (Styled)
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          mkdir -p summary

          START=$(date -d "1 hour ago" +%s)
          END=$(date +%s)

          declare -A monitors=(
            ["current-weather"]="45974783-1f084d67-0b9f-4bf0-8be3-5f0db8c25a4f"
            ["daily-forecast"]="45974783-1f084d6c-cd8b-4f70-a56c-2c989dd363c6"
            ["historical-data"]="45974783-1f084d7b-f131-47e0-b084-7926fd355a25"
          )

          for name in "${!monitors[@]}"; do
            uid=${monitors[$name]}
            mkdir -p summary/$name

            curl -s -H "X-Api-Key: $POSTMAN_API_KEY" \
              "https://api.getpostman.com/monitors/$uid/results?since=$START&until=$END" \
              -o summary/$name/results.json

            echo "monitor,timestamp,status,responseTime" > summary/$name/monitor.csv
            jq -r --arg NAME "$name" '.results[] | [$NAME, .timestamp, .status, .run.info.responseTime] | @csv' summary/$name/results.json \
              >> summary/$name/monitor.csv

            total=$(tail -n +2 summary/$name/monitor.csv | wc -l)
            passed=$(grep -c "ok" summary/$name/monitor.csv || true)
            failed=$((total - passed))
            skipped=0
            now=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

            {
              echo "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Monitor Report – $name</title>"
              echo "<style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                h1 { color: #333; }
                .summary { display: flex; gap: 20px; margin-bottom: 20px; }
                .card { padding: 15px; border-radius: 8px; color: white; font-weight: bold; min-width: 150px; text-align: center; }
                .green { background-color: #28a745; }
                .red { background-color: #dc3545; }
                .yellow { background-color: #ffc107; color: black; }
                table { border-collapse: collapse; width: 100%; margin-top: 20px; }
                th, td { border: 1px solid #ccc; padding: 8px; text-align: center; }
                th { background-color: #f4f4f4; }
                .fail { background-color: #f8d7da; }
                .pass { background-color: #d4edda; }
              </style></head><body>"

              echo "<h1>Monitor Report – $name</h1>"
              echo "<p><b>Generated:</b> $now | <b>Range:</b> Last 1 Hour</p>"

              echo "<div class='summary'>"
              echo "<div class='card green'>Total Runs<br>$total</div>"
              echo "<div class='card green'>Passed<br>$passed</div>"
              echo "<div class='card red'>Failed<br>$failed</div>"
              echo "<div class='card yellow'>Skipped<br>$skipped</div>"
              echo "</div>"

              echo "<h2>Run Details</h2>"
              echo "<table><tr><th>Timestamp</th><th>Status</th><th>Response Time (ms)</th></tr>"
              tail -n +2 summary/$name/monitor.csv | while IFS=, read monitor ts status rt; do
                if [[ $status == "ok" ]]; then
                  echo "<tr class='pass'><td>$ts</td><td>$status</td><td>$rt</td></tr>"
                else
                  echo "<tr class='fail'><td>$ts</td><td>$status</td><td>$rt</td></tr>"
                fi
              done
              echo "</table></body></html>"
            } > summary/$name/monitor.html
          done

      - name: Send Hourly Report by Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: "Hourly Postman Monitor Reports"
          to: "team@example.com"
          from: "ci-bot@example.com"
          body: "Attached are the styled HTML reports for each monitor (last 1 hour)."
          attachments: |
            summary/current-weather/monitor.html,
            summary/daily-forecast/monitor.html,
            summary/historical-data/monitor.html

      - name: Upload summary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hourly-summary
          path: summary/
