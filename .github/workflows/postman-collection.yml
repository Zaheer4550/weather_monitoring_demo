name: Automated API tests + Monitor (multi-region)

on:
  push:
  workflow_dispatch:

jobs:
  run-collection:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}

      - name: Run Postman Collection (CSV)
        run: |
          postman collection run Weather_Monitoring_Demo.postman_collection.json \
            --iteration-data weather_all.csv \
            --reporters cli,json \
            --reporter-json-export run_results.json

      - name: Check Collection Run Results
        run: |
          TOTAL=$(jq '.run.stats.assertions.total' run_results.json)
          FAILED=$(jq '.run.stats.assertions.failed' run_results.json)
          PASSED=$((TOTAL - FAILED))
          echo "===================="
          echo "   Postman CLI Results  "
          echo "===================="
          echo "Passed: $PASSED"
          echo "Failed: $FAILED"
          echo "Total : $TOTAL"
          echo "===================="
          if [ "$FAILED" -gt 0 ]; then
            echo "Collection tests failed."
            exit 1
          fi

      - name: Sync Collection to Postman (optional)
        if: always()
        run: |
          curl -sS -X PUT "https://api.getpostman.com/collections/${{ secrets.POSTMAN_COLLECTION_ID }}" \
            -H "X-Api-Key: ${{ secrets.POSTMAN_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data-binary @Weather_Monitoring_Demo.postman_collection.json \
            | jq .

      - name: Upload CLI run artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-cli-run
          path: run_results.json

  run-monitor-multiregion:
    needs: run-collection
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [ap-south, us-east, eu-west]  # Asia Pacific, US East, United Kingdom
    env:
      MONITOR_UID: ${{ secrets.POSTMAN_MONITOR_UID }}
    steps:
      - name: Trigger Monitor Run (region = ${{ matrix.region }})
        id: trigger
        env:
          API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          # Request body lets you target a specific region for this ad-hoc run
          BODY=$(jq -n --arg region "${{ matrix.region }}" '{ region: $region }')

          RESPONSE=$(curl -sS -X POST "https://api.getpostman.com/monitors/${MONITOR_UID}/run" \
            -H "X-Api-Key: $API_KEY" \
            -H "Content-Type: application/json" \
            -d "$BODY")

          echo "$RESPONSE" | jq .
          RUN_ID=$(echo "$RESPONSE" | jq -r '.run.id')
          if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
            echo "Failed to trigger monitor run."
            exit 1
          fi
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      - name: Wait for Monitor Run to Finish
        id: wait
        env:
          API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          RUN_ID="${{ steps.trigger.outputs.run_id }}"
          echo "Polling run status for: $RUN_ID (region ${{ matrix.region }})"

          MAX_TRIES=60  # ~5 minutes @ 5s polling
          TRY=0
          STATUS="pending"

          while [ $TRY -lt $MAX_TRIES ]; do
            RESP=$(curl -sS -X GET "https://api.getpostman.com/monitors/${MONITOR_UID}/runs/${RUN_ID}" \
              -H "X-Api-Key: $API_KEY")
            STATUS=$(echo "$RESP" | jq -r '.run.status')
            echo "Attempt $TRY â†’ status: $STATUS"
            if [ "$STATUS" = "finished" ] || [ "$STATUS" = "failed" ] || [ "$STATUS" = "error" ]; then
              echo "$RESP" > monitor_run_${{ matrix.region }}.json
              break
            fi
            sleep 5
            TRY=$((TRY+1))
          done

          if [ "$STATUS" != "finished" ] && [ "$STATUS" != "failed" ] && [ "$STATUS" != "error" ]; then
            echo "Monitor did not finish in time."
            exit 1
          fi

      - name: Extract basic stats
        run: |
          FILE="monitor_run_${{ matrix.region }}.json"
          jq -r '
            {
              runId: .run.id,
              region: .run.region,
              status: .run.status,
              startedAt: .run.startedAt,
              finishedAt: .run.finishedAt,
              avgResponseMs: (.run.summary.responseTimeAvg // .run.responseTime // null),
              failedAssertions: (.run.summary.assertions.failed // 0),
              totalAssertions: (.run.summary.assertions.total // 0)
            }
          ' "$FILE" > monitor_summary_${{ matrix.region }}.json
          cat monitor_summary_${{ matrix.region }}.json

      - name: Upload Monitor Artifacts (region = ${{ matrix.region }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-monitor-${{ matrix.region }}
          path: |
            monitor_run_${{ matrix.region }}.json
            monitor_summary_${{ matrix.region }}.json
