name: Automated API tests using Postman CLI

on: push

jobs:
  automated-api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install Postman CLI
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      # Login with API Key
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}

        name: Extract COLLECTION_UID from collection file
  run: |
    export COLLECTION_UID=$(jq -r '.info._postman_id' Weather_Monitoring_Demo.postman_collection.json)
    if [ -z "$COLLECTION_UID" ] || [ "$COLLECTION_UID" = "null" ]; then
      echo "Could not read info._postman_id from collection file"; exit 1
    fi
    echo "COLLECTION_UID=$COLLECTION_UID" >> $GITHUB_ENV

      # Sync the updated collection into Postman workspace
      - name: Sync Collection to Postman
        run: |
          curl -X PUT "https://api.getpostman.com/collections/${{ secrets.POSTMAN_COLLECTION_ID }}" \
            -H "X-Api-Key: ${{ secrets.POSTMAN_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @Weather_Monitoring_Demo.postman_collection.json
      # Trigger Postman Monitor Run (uses updated collection now)
      - name: Trigger Monitor Run
        run: |
          curl -s -X POST "https://api.getpostman.com/monitors/${{ secrets.POSTMAN_MONITOR_ID }}/run" \
            -H "X-Api-Key: ${{ secrets.POSTMAN_API_KEY }}" \
            -H "Content-Type: application/json" \
            -o trigger_response.json

          echo "Trigger response:"
          cat trigger_response.json || true

      # Wait and fetch Monitor Run Results (poll results/latest; no run.id dependency)
      - name: Wait for Monitor Run and Fetch Results
        run: |
          echo "Waiting for monitor run to finish..."
          STATUS=""
          # poll every 10s until finished
          until [ "$STATUS" = "finished" ]; do
            sleep 10
            STATUS=$(curl -s -X GET "https://api.getpostman.com/monitors/${{ secrets.POSTMAN_MONITOR_ID }}/results/latest" \
              -H "X-Api-Key: ${{ secrets.POSTMAN_API_KEY }}" | jq -r '.run.status')
            echo "Current status: ${STATUS:-null}"
          done

          # Save the finished run
          curl -s -X GET "https://api.getpostman.com/monitors/${{ secrets.POSTMAN_MONITOR_ID }}/results/latest" \
            -H "X-Api-Key: ${{ secrets.POSTMAN_API_KEY }}" \
            -o monitor_results.json

          echo "Monitor run results downloaded."

      # Convert JSON results into CSV (includes region + startedAt)
      - name: Convert Monitor Results to CSV (with region)
        run: |
          jq -r '
            . as $root
            | ($root.run.executions // [])[]
            | [
                .item.name,
                (.response.code // "NA"),
                (.response.status // "NA"),
                (.response.responseTime // "NA"),
                ($root.run.info.region // "unknown"),
                ($root.run.info.startTime // "unknown")
              ] | @csv
          ' monitor_results.json > monitor_results.csv

      # Upload Run Results
      - name: Upload Run Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: postman-run-results
          path: |
            monitor_results.json
            monitor_results.csv
