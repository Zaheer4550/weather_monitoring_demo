name: Postman Collection Sync + Hourly Monitor Summary

on:
  push:
    branches:
      - main
  schedule:
    # Run summary every hour (UTC)
    - cron: "0 * * * *"
  workflow_dispatch:

jobs:
  # ---------------------------
  # 1. Sync collections on push
  # ---------------------------
  update-collections:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update Current Weather Collection & Trigger Monitor
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          mkdir -p artifacts/current-weather
          curl -s -X PUT "https://api.getpostman.com/collections/12345-current-weather-uid" \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -H "Content-Type: application/json" \
            -d @Get\ Current\ Weather_A.postman_collection.json \
            -o artifacts/current-weather/collection_update.json

          curl -s -X POST "https://api.getpostman.com/monitors/45974783-1f084d67-0b9f-4bf0-8be3-5f0db8c25a4f/run" \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -o artifacts/current-weather/monitor_trigger.json

      - name: Update Daily Forecast Collection & Trigger Monitor
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          mkdir -p artifacts/daily-forecast
          curl -s -X PUT "https://api.getpostman.com/collections/12345-daily-forecast-uid" \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -H "Content-Type: application/json" \
            -d @Get\ Daily\ Forecast-\ B.postman_collection.json \
            -o artifacts/daily-forecast/collection_update.json

          curl -s -X POST "https://api.getpostman.com/monitors/45974783-1f084d6c-cd8b-4f70-a56c-2c989dd363c6/run" \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -o artifacts/daily-forecast/monitor_trigger.json

      - name: Update Historical Data Collection & Trigger Monitor
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          mkdir -p artifacts/historical-data
          curl -s -X PUT "https://api.getpostman.com/collections/12345-historical-data-uid" \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -H "Content-Type: application/json" \
            -d @Get\ Historical\ Data-\ C.postman_collection.json \
            -o artifacts/historical-data/collection_update.json

          curl -s -X POST "https://api.getpostman.com/monitors/45974783-1f084d7b-f131-47e0-b084-7926fd355a25/run" \
            -H "X-Api-Key: $POSTMAN_API_KEY" \
            -o artifacts/historical-data/monitor_trigger.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: monitor-updates
          path: artifacts/

  # ---------------------------
  # 2. Hourly summary job (styled per monitor + index.html, artifact only)
  # ---------------------------
  hourly-summary:
    if: github.event.schedule == '0 * * * *' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Build 1h Monitor Reports (Styled + Index)
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: |
          mkdir -p summary

          START=$(date -d "1 hour ago" +%s)
          END=$(date +%s)
          now=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          declare -A monitors=(
            ["current-weather"]="45974783-1f084d67-0b9f-4bf0-8be3-5f0db8c25a4f"
            ["daily-forecast"]="45974783-1f084d6c-cd8b-4f70-a56c-2c989dd363c6"
            ["historical-data"]="45974783-1f084d7b-f131-47e0-b084-7926fd355a25"
          )

          echo "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Hourly Monitor Reports</title></head><body>" > summary/index.html
          echo "<h1>Hourly Monitor Reports</h1>" >> summary/index.html
          echo "<p><b>Generated:</b> $now | <b>Range:</b> Last 1 Hour</p><ul>" >> summary/index.html

          for name in "${!monitors[@]}"; do
            uid=${monitors[$name]}
            mkdir -p summary/$name

            # Fetch last 1h results
            curl -s -H "X-Api-Key: $POSTMAN_API_KEY" \
              "https://api.getpostman.com/monitors/$uid/results?since=$START&until=$END" \
              -o summary/$name/results.json

            # Build CSV
            echo "monitor,timestamp,status,responseTime" > summary/$name/monitor.csv
            jq -r --arg NAME "$name" '.results[] | [$NAME, .timestamp, .status, .run.info.responseTime] | @csv' summary/$name/results.json \
              >> summary/$name/monitor.csv

            total=$(tail -n +2 summary/$name/monitor.csv | wc -l)
            passed=$(grep -c "ok" summary/$name/monitor.csv || true)
            failed=$((total - passed))
            skipped=0

            echo "✅ Generating HTML for $name with $total runs"

            # Build HTML
cat > summary/$name/monitor.html <<'EOF'
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Monitor Report – $name</title>
<style>
  body { font-family: Arial, sans-serif; margin: 20px; }
  h1 { color: #333; }
  .summary { display: flex; gap: 20px; margin-bottom: 20px; }
  .card { padding: 15px; border-radius: 8px; color: white; font-weight: bold; min-width: 150px; text-align: center; }
  .green { background-color: #28a745; }
  .red { background-color: #dc3545; }
  .yellow { background-color: #ffc107; color: black; }
  table { border-collapse: collapse; width: 100%; margin-top: 20px; }
  th, td { border: 1px solid #ccc; padding: 8px; text-align: center; }
  th { background-color: #f4f4f4; }
  .fail { background-color: #f8d7da; }
  .pass { background-color: #d4edda; }
</style>
</head>
<body>

<h1>Monitor Report – $name</h1>
<p><b>Generated:</b> $now | <b>Range:</b> Last 1 Hour</p>

<div class="summary">
  <div class="card green">Total Runs<br>$total</div>
  <div class="card green">Passed<br>$passed</div>
  <div class="card red">Failed<br>$failed</div>
  <div class="card yellow">Skipped<br>$skipped</div>
</div>

<h2>Run Details</h2>
<table>
<tr><th>Timestamp</th><th>Status</th><th>Response Time (ms)</th></tr>
EOF

            # Add table rows
            tail -n +2 summary/$name/monitor.csv | while IFS=, read monitor ts status rt; do
              if [[ $status == "ok" ]]; then
                echo "<tr class='pass'><td>$ts</td><td>$status</td><td>$rt</td></tr>" >> summary/$name/monitor.html
              else
                echo "<tr class='fail'><td>$ts</td><td>$status</td><td>$rt</td></tr>" >> summary/$name/monitor.html
              fi
            done

            # Close HTML
            echo "</table></body></html>" >> summary/$name/monitor.html

            # Add link to index.html
            echo "<li><a href='$name/monitor.html'>$name</a></li>" >> summary/index.html
          done

          echo "</ul></body></html>" >> summary/index.html

      - name: Upload summary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hourly-summary
          path: summary/
