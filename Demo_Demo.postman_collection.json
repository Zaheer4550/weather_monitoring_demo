{
	"info": {
		"_postman_id": "2995fb90-28e9-4a96-88ba-1cbd421e3189",
		"name": "Demo_Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45974783",
		"_collection_link": "https://postvehicle-enterprise-team-3244bd21-b4e1-4b1f-98bf-ef9e4de6.postman.co/workspace/student-5-workspace~2b1f8c87-7673-430b-93d9-4f732c44ce25/collection/45974783-2995fb90-28e9-4a96-88ba-1cbd421e3189?action=share&source=collection_link&creator=45974783"
	},
	"item": [
		{
			"name": "Current Weather",
			"item": [
				{
					"name": "Get Current Weather",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Respnse\r",
									"pm.test(\"Response-200 OK\", () => pm.response.to.have.status(200));\r",
									"const city = pm.iterationData.get(\"city\");\r",
									"const cw = (pm.response.json() || {}).current_weather || {};\r",
									"console.log(`${city}: temp=${cw.temperature}°C, wind=${cw.windspeed} km/h, code=${cw.weathercode}`);\r",
									"//Latency Check\r",
									"pm.test(\"Latency Check- Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.open-meteo.com/v1/forecast?latitude={{latitude}}&longitude={{longitude}}&current_weather=true",
							"protocol": "https",
							"host": [
								"api",
								"open-meteo",
								"com"
							],
							"path": [
								"v1",
								"forecast"
							],
							"query": [
								{
									"key": "latitude",
									"value": "{{latitude}}"
								},
								{
									"key": "longitude",
									"value": "{{longitude}}"
								},
								{
									"key": "current_weather",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const runScope = pm.environment.get(\"RUN_SCOPE\") || \"ALL\";\r",
							"const folder = \"CURRENT\"; \r",
							"if (runScope !== \"ALL\" && runScope !== folder) {\r",
							"  pm.setNextRequest(null); \r",
							"}\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Daily Forecast",
			"item": [
				{
					"name": "Get Daily Forecast",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response-200 OK\", () => pm.response.to.have.status(200));\r",
									"\r",
									"const city = pm.iterationData.get(\"city\");\r",
									"const daily = pm.response.json().daily || {};\r",
									"const maxTemps = daily.temperature_2m_max;\r",
									"const minTemps = daily.temperature_2m_min;\r",
									"\r",
									"// Log today’s forecast\r",
									"console.log(`${city} → Max: ${maxTemps[0]}°C, Min: ${minTemps[0]}°C`);\r",
									"// Latency check\r",
									"pm.test(\"Latency Check-Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.open-meteo.com/v1/forecast?latitude={{latitude}}&longitude={{longitude}}&daily=temperature_2m_max,temperature_2m_min&timezone={{timezone}}",
							"protocol": "https",
							"host": [
								"api",
								"open-meteo",
								"com"
							],
							"path": [
								"v1",
								"forecast"
							],
							"query": [
								{
									"key": "latitude",
									"value": "{{latitude}}"
								},
								{
									"key": "longitude",
									"value": "{{longitude}}"
								},
								{
									"key": "daily",
									"value": "temperature_2m_max,temperature_2m_min"
								},
								{
									"key": "timezone",
									"value": "{{timezone}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const runScope = pm.environment.get(\"RUN_SCOPE\") || \"ALL\";\r",
							"const folder = \"FORECAST\"; \r",
							"\r",
							"if (runScope !== \"ALL\" && runScope !== folder) {\r",
							"  pm.setNextRequest(null); \r",
							"}\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Historical Data",
			"item": [
				{
					"name": "Get Historical Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Respnse-200 OK\", () => pm.response.to.have.status(200));\r",
									"// Latency check\r",
									"pm.test(\"Latency check- Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const city = pm.iterationData.get(\"city\");\r",
									"const json = pm.response.json();\r",
									"const daily = json.daily || {};\r",
									"const max = daily.temperature_2m_max || [];\r",
									"const min = daily.temperature_2m_min || [];\r",
									"\r",
									"// Log first day and simple stats\r",
									"if (max.length && min.length) {\r",
									"  const first = `${daily.time?.[0]} → Max: ${max[0]}°C, Min: ${min[0]}°C`;\r",
									"  const avgMax = (max.reduce((a,b)=>a+b,0) / max.length).toFixed(1);\r",
									"  const avgMin = (min.reduce((a,b)=>a+b,0) / min.length).toFixed(1);\r",
									"  console.log(`${city}: ${first} | Avg Max: ${avgMax}°C, Avg Min: ${avgMin}°C`);\r",
									"} else {\r",
									"  console.warn(`${city}: no daily data returned`);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://archive-api.open-meteo.com/v1/archive?latitude={{latitude}}&longitude={{longitude}}&start_date={{start_date}}&end_date={{end_date}}&daily=temperature_2m_max,temperature_2m_min&timezone={{timezone}}",
							"protocol": "https",
							"host": [
								"archive-api",
								"open-meteo",
								"com"
							],
							"path": [
								"v1",
								"archive"
							],
							"query": [
								{
									"key": "latitude",
									"value": "{{latitude}}"
								},
								{
									"key": "longitude",
									"value": "{{longitude}}"
								},
								{
									"key": "start_date",
									"value": "{{start_date}}"
								},
								{
									"key": "end_date",
									"value": "{{end_date}}"
								},
								{
									"key": "daily",
									"value": "temperature_2m_max,temperature_2m_min"
								},
								{
									"key": "timezone",
									"value": "{{timezone}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const runScope = pm.environment.get(\"RUN_SCOPE\") || \"ALL\";\r",
							"const folder = \"ARCHIVE\"; \r",
							"\r",
							"if (runScope !== \"ALL\" && runScope !== folder) {\r",
							"  pm.setNextRequest(null); \r",
							"}\r",
							"\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}